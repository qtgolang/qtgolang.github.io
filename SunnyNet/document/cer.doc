.版本 2
.支持库 spec

.子程序 __启动窗口_创建完毕
.局部变量 http回调函数, 整数型
.局部变量 WebSocket回调函数, 整数型
.局部变量 Tcp回调函数, 整数型
.局部变量 错误信息, 文本型
.局部变量 证书, Sunny证书管理器

' Sunny中间件  在模块中已是全局变量，直接使用即可
Sunny中间件.绑定端口 (2022)

http回调函数 ＝ 到整数 (&__示例__HTTP回调函数)
WebSocket回调函数 ＝ 0
Tcp回调函数 ＝ 0

Sunny中间件.绑定回调地址 (http回调函数, Tcp回调函数, WebSocket回调函数)
' Sunny中间件.设置IE代理 ()  ' 设置IE代理
' Sunny中间件.关闭IE代理 ()'取消IE代理

证书._载入X509Certificate (“这里可以不写”, “cer”, “key”)

Sunny中间件.设置自定义CA证书 (证书)

.如果 (Sunny中间件.启动 ())
    .如果真 (Sunny中间件.安装证书 (错误信息) ＝ 假)
        信息框 (“自动安装证书到系统失败,请手动安装证书！” ＋ #换行符 ＋ #换行符 ＋ 错误信息, 0, “证书安装失败”, )
    .如果真结束
    ' 安装证书请阅读：http://esunny.vip/ 中的 [Sunny网络中间件-示例]->[(教程)安装证书]
    信息框 (“启动成功”, 0, , )

.否则
    信息框 (Sunny中间件.取错误 (), #错误图标, “启动失败”, )
.如果结束


.子程序 __示例__HTTP回调函数, , 公开
.参数 SunnyContext, 整数型, , Sunny中间件可创建多个 由这个参数判断是哪个Sunny回调过来的
.参数 请求唯一ID, 整数型
.参数 MessageId, 整数型
.参数 消息类型, 整数型, , #Sunny_消息类型_
.参数 Method, 文本型
.参数 请求地址, 文本型
.参数 err, 文本型
.参数 pid, 整数型, , 进程PID 若等于0 表示通过代理请求 无进程PID
.局部变量 sunny, Sunny
.局部变量 bin, 字节集

' 必须使用该语句取回sunny对象
sunny ＝ MessageIdToSunny (MessageId)
调试输出 (请求地址)
' 执行流程是 发起请求->请求是否需要过滤->请求完成/请求失败
.判断开始 (消息类型 ＝ #Sunny_消息类型_发起请求)  ' 发起请求 http/https请求    ' 【sunny.请求】 可 在 【发起请求、请求完成、请求失败】 中使用
    调试输出 (“消息ID”, 请求唯一ID, “开始请求”, “URL”, 请求地址)
    ' 直接回复文件【2022/03/02新增】
    ' sunny.响应.修改或新增协议头 (“Content-Type: text/html” ＋ #换行符 ＋ “Server: Sunny”)
    ' sunny.响应.修改响应内容_字节集 (读入文件 (“C:\Users\qinka\Desktop\node.js”))

    ' 请注意  在【发起请求】中修改响应数据为 直接回复文件
    ' 将 不会执行【请求完成】【请求失败】
    ' 设置数据不需要指定文件长度,内部自动计算

    ' sunny.请求.终止发送() '使用后 这个请求将不会发送出去 2022-09-16 新增【只能在 发起请求 中使用】

.判断 (消息类型 ＝ #Sunny_消息类型_请求完成)  ' 服务器返回数据

    .如果真 (寻找文本 (请求地址, “game/map_info”, , 假) ≠ -1)

        bin ＝ sunny.响应.取响应Body ()
        bin ＝ 子字节集替换 (bin, 到字节集 (“你好”), 到字节集 (“哈喽”), , )
        sunny.响应.修改响应内容_字节集 (bin)

    .如果真结束
    ' 【sunny.响应】 仅可 在 请求完成 中使用
    调试输出 (“消息ID”, 请求唯一ID, “请求完成”, sunny.响应.取正文长度 (), “URL”, 请求地址)

.判断 (消息类型 ＝ #Sunny_消息类型_请求失败)  ' http/https请求 请求失败

    调试输出 (“消息ID”, 请求唯一ID, “URL”, 请求地址, “请求失败：” ＋ err)

.默认

.判断结束



返回 ()