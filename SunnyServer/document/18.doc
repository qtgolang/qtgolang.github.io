.版本 2
.支持库 spec

.子程序 __启动窗口_创建完毕
.局部变量 主机名, 文本型
.局部变量 端口, 整数型
.局部变量 密码, 文本型

' Redis 为全局变量“SunnyRedis”类型
主机名 ＝ “127.0.0.1”
端口 ＝ 6379
密码 ＝ “”
' 子程序名：连接
' 连接失败 可调用 取连接错误信息（）
' 返回值类型：逻辑型
' 参数<1>的名称为“主机名”，类型为“文本型”。
' 参数<2>的名称为“端口”，类型为“整数型”。
' 参数<3>的名称为“密码”，类型为“文本型”，允许接收空参数数据。
' 参数<4>的名称为“数据库”，类型为“整数型”，允许接收空参数数据。注明：默认0号数据库。
' 参数<5>的名称为“连接池数量”，类型为“整数型”，允许接收空参数数据。注明：默认15。
' 参数<6>的名称为“最小连接数”，类型为“整数型”，允许接收空参数数据。注明：默认10。
' 参数<7>的名称为“连接超时时间”，类型为“整数型”，允许接收空参数数据。注明：单位秒 默认5。
' 参数<8>的名称为“读取超时”，类型为“整数型”，允许接收空参数数据。注明：单位秒 默认5。
' 参数<9>的名称为“写入超时”，类型为“整数型”，允许接收空参数数据。注明：单位秒 默认5。
' 参数<10>的名称为“PoolTimeout”，类型为“整数型”，允许接收空参数数据。注明：[当所有连接都在繁忙状态时,客户端等待可用连接的最大等待时间] 单位秒 默认5 。
' 参数<11>的名称为“闲置连接检查周期”，类型为“整数型”，允许接收空参数数据。注明：单位秒 默认60。
' 参数<12>的名称为“闲置超时”，类型为“整数型”，允许接收空参数数据。注明：单位秒 默认5。
.如果真 (Redis.连接 (主机名, 端口, 密码) ＝ 假)
    调试输出 (“连接 Redis 服务器失败:”, Redis.取连接错误信息 ())
    结束 ()
.如果真结束

' 若要使用 订阅消息 或 订阅当前数据库过期消息
' Redis 服务器 需要打开 相关功能
' 因为开启键空间通知功能需要消耗一些CPU ， 所以在默认配置下， 该功能处于关闭状态。
' 可以通过修改 redis.conf 文件， 或者直接使用 CONFIG SET 命令来开启或关闭键空间通知功能：
' 当 notify-keyspace-events 选项的参数为空字符串时，功能关闭。
' 或者直接在命令行中配置： redis-cli config set notify-keyspace-events KEA

' 请参考 https://blog.csdn.net/zhizhengguan/article/details/90575438

Redis.订阅当前数据库过期消息 (到整数 (&Redis过期消息_通知函数), 真)

' 设置一个 名称叫 key 的 值 内容为 key123456 有效期为 3 秒 若填写0秒 表示 永久有效
' 成功返回真
调试输出 (Redis.设置 (“key”, “key123456”, 3))
' 若重复设置依旧返回真
调试输出 (Redis.设置 (“key”, “key123456”, 3))

调试输出 (Redis.取文本值 (“key”))

' 设置一个 名称叫 keynx 的 值 内容为 keynx123456 有效期为 3 秒 若填写0秒 表示 永久有效
' 成功返回真

调试输出 (Redis.设置NX (“keynx”, “keynx123456”, 3))
' 若keynx已存在返回假
调试输出 (Redis.设置NX (“keynx”, “keynx123456”, 3))

调试输出 (Redis.取文本值 (“keynx”))

取所有键名 ()


' 删除一个键名
Redis.删除 (“keynx”)


自定义执行或查询 ()



.子程序 取所有键名
.局部变量 键名, 文本型, , "0"
.局部变量 x, 整数型

' Redis 为全局变量“SunnyRedis”类型

.计次循环首 (Redis.取所有键名 (键名), x)
    调试输出 (键名 [x])
.计次循环尾 ()

.子程序 Redis过期消息_通知函数
.参数 通知消息, 文本型

调试输出 (通知消息)
' {"Channel":"__keyevent@0__:expired","Pattern":"","Payload":"key"}




.子程序 自定义执行或查询
.局部变量 错误信息, 文本型



' 设置多个键值
调试输出 (Redis.Do (“MSET key1 我是key1的值 key2 value2”, 错误信息))


' 如果key 或 值中有空格 在空格前加\
调试输出 (Redis.Do (“MSET key1 我是key1的\ 值 key2 value2”, 错误信息))



' 查询所有键
调试输出 (Redis.Do (“keys *”, 错误信息))